//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use super::sea_orm_active_enums::Action;
use async_graphql::SimpleObject;
use sea_orm::{entity::prelude::*, IntoActiveModel};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject)]
#[sea_orm(table_name = "permission")]
#[graphql(name = "Permission")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[graphql(skip)]
    pub applies_to: String,
    pub path: String,
    pub action: Action,
    pub affects_children: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::AppliesTo",
        to = "super::user::Column::Username",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn as_active_model(&self) -> ActiveModel {
        self.clone().into_active_model()
    }
}
