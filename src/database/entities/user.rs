//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use super::{permission, sea_orm_active_enums::Action};
use crate::error::Result;
use async_graphql::{ComplexObject, Context, FieldResult, SimpleObject};
use sea_orm::{entity::prelude::*, IntoActiveModel};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, SimpleObject)]
#[sea_orm(table_name = "user")]
#[graphql(name = "User", complex)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub username: String,
    pub name: String,
    #[graphql(skip)]
    pub access_token: Option<String>,
    pub default_access: Action,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::permission::Entity")]
    Permission,
}

impl Related<super::permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permission.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn as_active_model(&self) -> ActiveModel {
        self.clone().into_active_model()
    }

    pub async fn permissions(&self, db: &DatabaseConnection) -> Result<Vec<permission::Model>> {
        Ok(self.find_related(permission::Entity).all(db).await?)
    }
}

#[ComplexObject]
impl Model {
    #[graphql(name = "permissions")]
    async fn permissions_resolver(&self, ctx: &Context<'_>) -> FieldResult<Vec<permission::Model>> {
        let db = ctx.data::<DatabaseConnection>()?;
        Ok(self.permissions(db).await?)
    }
}
